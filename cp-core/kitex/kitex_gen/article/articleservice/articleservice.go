// Code generated by Kitex v0.12.1. DO NOT EDIT.

package articleservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	article "github.com/lianzhilu/chat-paper/cp-core/kitex/kitex_gen/article"
	base "github.com/lianzhilu/chat-paper/cp-core/kitex/kitex_gen/base"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateArticle": kitex.NewMethodInfo(
		createArticleHandler,
		newArticleServiceCreateArticleArgs,
		newArticleServiceCreateArticleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetArticle": kitex.NewMethodInfo(
		getArticleHandler,
		newArticleServiceGetArticleArgs,
		newArticleServiceGetArticleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListArticles": kitex.NewMethodInfo(
		listArticlesHandler,
		newArticleServiceListArticlesArgs,
		newArticleServiceListArticlesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateArticle": kitex.NewMethodInfo(
		updateArticleHandler,
		newArticleServiceUpdateArticleArgs,
		newArticleServiceUpdateArticleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteArticle": kitex.NewMethodInfo(
		deleteArticleHandler,
		newArticleServiceDeleteArticleArgs,
		newArticleServiceDeleteArticleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	articleServiceServiceInfo                = NewServiceInfo()
	articleServiceServiceInfoForClient       = NewServiceInfoForClient()
	articleServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return articleServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return articleServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return articleServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ArticleService"
	handlerType := (*article.ArticleService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "article",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceCreateArticleArgs)
	realResult := result.(*article.ArticleServiceCreateArticleResult)
	success, err := handler.(article.ArticleService).CreateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceCreateArticleArgs() interface{} {
	return article.NewArticleServiceCreateArticleArgs()
}

func newArticleServiceCreateArticleResult() interface{} {
	return article.NewArticleServiceCreateArticleResult()
}

func getArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceGetArticleArgs)
	realResult := result.(*article.ArticleServiceGetArticleResult)
	success, err := handler.(article.ArticleService).GetArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceGetArticleArgs() interface{} {
	return article.NewArticleServiceGetArticleArgs()
}

func newArticleServiceGetArticleResult() interface{} {
	return article.NewArticleServiceGetArticleResult()
}

func listArticlesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceListArticlesArgs)
	realResult := result.(*article.ArticleServiceListArticlesResult)
	success, err := handler.(article.ArticleService).ListArticles(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceListArticlesArgs() interface{} {
	return article.NewArticleServiceListArticlesArgs()
}

func newArticleServiceListArticlesResult() interface{} {
	return article.NewArticleServiceListArticlesResult()
}

func updateArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceUpdateArticleArgs)
	realResult := result.(*article.ArticleServiceUpdateArticleResult)
	success, err := handler.(article.ArticleService).UpdateArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceUpdateArticleArgs() interface{} {
	return article.NewArticleServiceUpdateArticleArgs()
}

func newArticleServiceUpdateArticleResult() interface{} {
	return article.NewArticleServiceUpdateArticleResult()
}

func deleteArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceDeleteArticleArgs)
	realResult := result.(*article.ArticleServiceDeleteArticleResult)
	success, err := handler.(article.ArticleService).DeleteArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceDeleteArticleArgs() interface{} {
	return article.NewArticleServiceDeleteArticleArgs()
}

func newArticleServiceDeleteArticleResult() interface{} {
	return article.NewArticleServiceDeleteArticleResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateArticle(ctx context.Context, req *article.CreateArticleRequest) (r *article.CreateArticleResponse, err error) {
	var _args article.ArticleServiceCreateArticleArgs
	_args.Req = req
	var _result article.ArticleServiceCreateArticleResult
	if err = p.c.Call(ctx, "CreateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticle(ctx context.Context, req *article.GetArticleRequest) (r *article.Article, err error) {
	var _args article.ArticleServiceGetArticleArgs
	_args.Req = req
	var _result article.ArticleServiceGetArticleResult
	if err = p.c.Call(ctx, "GetArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListArticles(ctx context.Context, req *article.ListArticlesRequest) (r *article.ListArticlesResponse, err error) {
	var _args article.ArticleServiceListArticlesArgs
	_args.Req = req
	var _result article.ArticleServiceListArticlesResult
	if err = p.c.Call(ctx, "ListArticles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateArticle(ctx context.Context, req *article.UpdateArticleRequest) (r *base.EmptyBody, err error) {
	var _args article.ArticleServiceUpdateArticleArgs
	_args.Req = req
	var _result article.ArticleServiceUpdateArticleResult
	if err = p.c.Call(ctx, "UpdateArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteArticle(ctx context.Context, req *article.DeleteArticleRequest) (r *base.EmptyBody, err error) {
	var _args article.ArticleServiceDeleteArticleArgs
	_args.Req = req
	var _result article.ArticleServiceDeleteArticleResult
	if err = p.c.Call(ctx, "DeleteArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
