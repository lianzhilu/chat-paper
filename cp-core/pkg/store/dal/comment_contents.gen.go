// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lianzhilu/chat-paper/cp-core/pkg/store/model"
)

func newCommentContents(db *gorm.DB, opts ...gen.DOOption) commentContents {
	_commentContents := commentContents{}

	_commentContents.commentContentsDo.UseDB(db, opts...)
	_commentContents.commentContentsDo.UseModel(&model.CommentContents{})

	tableName := _commentContents.commentContentsDo.TableName()
	_commentContents.ALL = field.NewAsterisk(tableName)
	_commentContents.ID = field.NewUint64(tableName, "id")
	_commentContents.CommentID = field.NewString(tableName, "sid")
	_commentContents.Content = field.NewString(tableName, "content")
	_commentContents.CreateTime = field.NewTime(tableName, "create_time")
	_commentContents.UpdateTime = field.NewTime(tableName, "update_time")
	_commentContents.DeleteTime = field.NewUint(tableName, "delete_time")

	_commentContents.fillFieldMap()

	return _commentContents
}

type commentContents struct {
	commentContentsDo commentContentsDo

	ALL        field.Asterisk
	ID         field.Uint64
	CommentID  field.String
	Content    field.String
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Uint

	fieldMap map[string]field.Expr
}

func (c commentContents) Table(newTableName string) *commentContents {
	c.commentContentsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentContents) As(alias string) *commentContents {
	c.commentContentsDo.DO = *(c.commentContentsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentContents) updateTableName(table string) *commentContents {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.CommentID = field.NewString(table, "sid")
	c.Content = field.NewString(table, "content")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.DeleteTime = field.NewUint(table, "delete_time")

	c.fillFieldMap()

	return c
}

func (c *commentContents) WithContext(ctx context.Context) ICommentContentsDo {
	return c.commentContentsDo.WithContext(ctx)
}

func (c commentContents) TableName() string { return c.commentContentsDo.TableName() }

func (c commentContents) Alias() string { return c.commentContentsDo.Alias() }

func (c commentContents) Columns(cols ...field.Expr) gen.Columns {
	return c.commentContentsDo.Columns(cols...)
}

func (c *commentContents) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentContents) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["sid"] = c.CommentID
	c.fieldMap["content"] = c.Content
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["delete_time"] = c.DeleteTime
}

func (c commentContents) clone(db *gorm.DB) commentContents {
	c.commentContentsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commentContents) replaceDB(db *gorm.DB) commentContents {
	c.commentContentsDo.ReplaceDB(db)
	return c
}

type commentContentsDo struct{ gen.DO }

type ICommentContentsDo interface {
	gen.SubQuery
	Debug() ICommentContentsDo
	WithContext(ctx context.Context) ICommentContentsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentContentsDo
	WriteDB() ICommentContentsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentContentsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentContentsDo
	Not(conds ...gen.Condition) ICommentContentsDo
	Or(conds ...gen.Condition) ICommentContentsDo
	Select(conds ...field.Expr) ICommentContentsDo
	Where(conds ...gen.Condition) ICommentContentsDo
	Order(conds ...field.Expr) ICommentContentsDo
	Distinct(cols ...field.Expr) ICommentContentsDo
	Omit(cols ...field.Expr) ICommentContentsDo
	Join(table schema.Tabler, on ...field.Expr) ICommentContentsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentContentsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentContentsDo
	Group(cols ...field.Expr) ICommentContentsDo
	Having(conds ...gen.Condition) ICommentContentsDo
	Limit(limit int) ICommentContentsDo
	Offset(offset int) ICommentContentsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentContentsDo
	Unscoped() ICommentContentsDo
	Create(values ...*model.CommentContents) error
	CreateInBatches(values []*model.CommentContents, batchSize int) error
	Save(values ...*model.CommentContents) error
	First() (*model.CommentContents, error)
	Take() (*model.CommentContents, error)
	Last() (*model.CommentContents, error)
	Find() ([]*model.CommentContents, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentContents, err error)
	FindInBatches(result *[]*model.CommentContents, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommentContents) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentContentsDo
	Assign(attrs ...field.AssignExpr) ICommentContentsDo
	Joins(fields ...field.RelationField) ICommentContentsDo
	Preload(fields ...field.RelationField) ICommentContentsDo
	FirstOrInit() (*model.CommentContents, error)
	FirstOrCreate() (*model.CommentContents, error)
	FindByPage(offset int, limit int) (result []*model.CommentContents, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentContentsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentContentsDo) Debug() ICommentContentsDo {
	return c.withDO(c.DO.Debug())
}

func (c commentContentsDo) WithContext(ctx context.Context) ICommentContentsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentContentsDo) ReadDB() ICommentContentsDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentContentsDo) WriteDB() ICommentContentsDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentContentsDo) Session(config *gorm.Session) ICommentContentsDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentContentsDo) Clauses(conds ...clause.Expression) ICommentContentsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentContentsDo) Returning(value interface{}, columns ...string) ICommentContentsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentContentsDo) Not(conds ...gen.Condition) ICommentContentsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentContentsDo) Or(conds ...gen.Condition) ICommentContentsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentContentsDo) Select(conds ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentContentsDo) Where(conds ...gen.Condition) ICommentContentsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentContentsDo) Order(conds ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentContentsDo) Distinct(cols ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentContentsDo) Omit(cols ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentContentsDo) Join(table schema.Tabler, on ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentContentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentContentsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentContentsDo) Group(cols ...field.Expr) ICommentContentsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentContentsDo) Having(conds ...gen.Condition) ICommentContentsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentContentsDo) Limit(limit int) ICommentContentsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentContentsDo) Offset(offset int) ICommentContentsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentContentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentContentsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentContentsDo) Unscoped() ICommentContentsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentContentsDo) Create(values ...*model.CommentContents) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentContentsDo) CreateInBatches(values []*model.CommentContents, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentContentsDo) Save(values ...*model.CommentContents) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentContentsDo) First() (*model.CommentContents, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContents), nil
	}
}

func (c commentContentsDo) Take() (*model.CommentContents, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContents), nil
	}
}

func (c commentContentsDo) Last() (*model.CommentContents, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContents), nil
	}
}

func (c commentContentsDo) Find() ([]*model.CommentContents, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentContents), err
}

func (c commentContentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentContents, err error) {
	buf := make([]*model.CommentContents, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentContentsDo) FindInBatches(result *[]*model.CommentContents, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentContentsDo) Attrs(attrs ...field.AssignExpr) ICommentContentsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentContentsDo) Assign(attrs ...field.AssignExpr) ICommentContentsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentContentsDo) Joins(fields ...field.RelationField) ICommentContentsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentContentsDo) Preload(fields ...field.RelationField) ICommentContentsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentContentsDo) FirstOrInit() (*model.CommentContents, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContents), nil
	}
}

func (c commentContentsDo) FirstOrCreate() (*model.CommentContents, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContents), nil
	}
}

func (c commentContentsDo) FindByPage(offset int, limit int) (result []*model.CommentContents, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentContentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentContentsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentContentsDo) Delete(models ...*model.CommentContents) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentContentsDo) withDO(do gen.Dao) *commentContentsDo {
	c.DO = *do.(*gen.DO)
	return c
}
